[
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "importPath": "blockchain",
        "description": "blockchain",
        "isExtraImport": true,
        "detail": "blockchain",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "blockchain",
        "description": "blockchain",
        "peekOfCode": "class Block:\n    def __init__(self, index, previous_hash, timestamp, data, validator):\n        self.index = index\n        self.previous_hash = previous_hash\n        self.timestamp = timestamp\n        self.data = data\n        self.validator = validator\n        self.hash = self.calculate_hash()\n    def calculate_hash(self):\n        block_string = json.dumps(self.__dict__, sort_keys=True)",
        "detail": "blockchain",
        "documentation": {}
    },
    {
        "label": "Blockchain",
        "kind": 6,
        "importPath": "blockchain",
        "description": "blockchain",
        "peekOfCode": "class Blockchain:\n    def __init__(self):\n        self.chain = [self.create_genesis_block()]\n        self.validators = set()\n        self.roles = {}\n        self.encryption_key = Fernet.generate_key()\n        self.cipher = Fernet(self.encryption_key)\n        self.nodes = set()\n    def create_genesis_block(self):\n        return Block(0, \"0\", time.time(), \"Genesis Block\", \"System\")",
        "detail": "blockchain",
        "documentation": {}
    },
    {
        "label": "add_validator",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def add_validator():\n    data = request.json\n    bc.add_validator(data['validator_id'], data['role'])\n    return jsonify({\"message\": \"Validator added\"}), 200\n@app.route('/add_block', methods=['POST'])\ndef add_block():\n    data = request.json\n    try:\n        block = bc.add_block(data['data'], data['validator'])\n        return jsonify({\"message\": \"Block added\", \"block\": block.__dict__}), 201",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "add_block",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def add_block():\n    data = request.json\n    try:\n        block = bc.add_block(data['data'], data['validator'])\n        return jsonify({\"message\": \"Block added\", \"block\": block.__dict__}), 201\n    except ValueError as e:\n        return jsonify({\"error\": str(e)}), 403\n@app.route('/get_records/<patient_id>', methods=['GET'])\ndef get_records(patient_id):\n    records = bc.get_patient_records(patient_id)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "get_records",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def get_records(patient_id):\n    records = bc.get_patient_records(patient_id)\n    return jsonify(records), 200\n@app.route('/register_node', methods=['POST'])\ndef register_node():\n    node_address = request.json['node_address']\n    bc.register_node(node_address)\n    return jsonify({\"message\": \"Node registered\"}), 200\n@socketio.on('connect')\ndef handle_connect():",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "register_node",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def register_node():\n    node_address = request.json['node_address']\n    bc.register_node(node_address)\n    return jsonify({\"message\": \"Node registered\"}), 200\n@socketio.on('connect')\ndef handle_connect():\n    print(\"New node connected\")\nif __name__ == '__main__':\n    socketio.run(app, host='0.0.0.0', port=5000, debug=True)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "handle_connect",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def handle_connect():\n    print(\"New node connected\")\nif __name__ == '__main__':\n    socketio.run(app, host='0.0.0.0', port=5000, debug=True)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app = Flask(__name__)\nsocketio = SocketIO(app)\nbc = Blockchain()\n@app.route('/add_validator', methods=['POST'])\ndef add_validator():\n    data = request.json\n    bc.add_validator(data['validator_id'], data['role'])\n    return jsonify({\"message\": \"Validator added\"}), 200\n@app.route('/add_block', methods=['POST'])\ndef add_block():",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "socketio = SocketIO(app)\nbc = Blockchain()\n@app.route('/add_validator', methods=['POST'])\ndef add_validator():\n    data = request.json\n    bc.add_validator(data['validator_id'], data['role'])\n    return jsonify({\"message\": \"Validator added\"}), 200\n@app.route('/add_block', methods=['POST'])\ndef add_block():\n    data = request.json",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "bc",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "bc = Blockchain()\n@app.route('/add_validator', methods=['POST'])\ndef add_validator():\n    data = request.json\n    bc.add_validator(data['validator_id'], data['role'])\n    return jsonify({\"message\": \"Validator added\"}), 200\n@app.route('/add_block', methods=['POST'])\ndef add_block():\n    data = request.json\n    try:",
        "detail": "server",
        "documentation": {}
    }
]